int[][] c;
int ans = 0;
int[] visit = new int[110];
int[] pre = new int[110];
int[] f = new int[110];
int i;
int j;
int open;
int closed;

void origin(int N)
{
	c = new int[N][];
    for (i = 0; i < N; i ++ ) {
		c[i] = new int[N];
        for (j = 0; j < N; j ++ )
        c[i][j] = 0;
    }
}

int build(int start, int ending) {
    println(toString(ending));
    for (i = 1; i <= 49; i++) {
        for (j = 50; j <= 98-i+1; j++) {
            c[i][j] = 1;
        }
    }
    for (i = 1; i <= 49; i++)
        c[start][i] = 1;

    for (i = 50; i <= 98; i++)
        //c[i][ending] = 1;
    return 0;
}
int main() {
    println("hhhh");
	origin(110);
	println("qqqq");
    int k;
	int start;
	int ending;
    int flag;
    int i1;

     k = 0;
     start = 99;
     ending = 100;
     flag = 0;

     //println(toString(start));
     println(toString(ending));
     build(start, ending);
    // while (find(ending, start, flag)>0) {
    //     improve(ending);
    // }
    // println(toString(ans));
    return 0;
}




/*!! metadata:
=== comment ===
maxflow-5100379110-daibo.mx
=== input ===

=== assert ===
output
=== timeout ===
0.3
=== output ===
49
=== phase ===
codegen pretest
=== is_public ===
True

!!*/
