int[] b = new int[500005];
int[] now = new int[500005];
int[] t = new int[500005];
int[] a = new int[200005];
int n;
int m;
int p;
int op;
int L = 1;
int[] flag = new int[500005];
int[][] s = new int[500005][80];
int[] sum = new int[500005];
int ans = 0;


int aa=13131;
int bb=5353;
int MOD=(2<<14) - 7;
int no=1;

int RandRange(int low, int high)
{
    return low + Rand() % (high - low + 1) + 1;
}
int square(int x) {
    return (x % p) * (x % p) ;
}
void build(int o, int l, int r) {
    int i = 0;
    if(l == r) {
        sum[o] = a[l];
        if(a[l] < p && a[l] >= 0  && b[a[l] % p] > 0) {
            flag[o] = 1;
            s[o][0] = a[l];
            for(i = 1; i < L; ++i)
                s[o][i] = square(s[o][i - 1]) % p;
        }
        now[o] = 0;
    } else {
        int lc = o * 2;
        int rc = o * 2 + 1;
        int mid = (l + r) / 2;
        build(lc, l, mid);
        build(rc, mid + 1, r);
        sum[o] = sum[lc] + sum[rc];
        flag[o] = flag[lc] & flag[rc];
        if(flag[o]>0){
            for(i = 0; i < L; ++i)
                s[o][i] = s[lc][i] + s[rc][i];
            now[0] = 0;
        }
    }
}


int pl = 0;
int pr = 0;



int main() {
    n = getInt();
    m = getInt();
    p = getInt();
    int i = 1;
    for(i = 1; i <= n; ++i)
        a[i] = RandRange(0, p);
    init();
    build(1, 1, n);
    return 0;
}



/*!! metadata:
=== comment ===
segtree-515030910592-lijinning.txt
=== is_public ===
True
=== assert ===
output
=== timeout ===
1.5
=== input ===
40000
40000
9977
=== phase ===
optim pretest
=== output ===
21523
=== exitcode ===


!!*/
